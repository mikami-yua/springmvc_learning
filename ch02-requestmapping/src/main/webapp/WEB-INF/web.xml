<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--注册springmvc的核心对象
        需要在tomcat服务启动后，创建DispatcherServlet对象实例。
        为什么创建DispatcherServlet对象实例
            DispatcherServlet在创建过程中，会同时创建springmvc容器对象，
           读取springmvc的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时，就可以直接使用对象了

            servlet的初始化会执行init（）方法，DispatcherServlet在init（）中创建容器读取配置文件
            把容器对象放到servletContext中，在web项目中可以使用servlet对象了

            启动tomcat报错：读取这个文件/WEB-INF/springmvc-servlet.xml
            /WEB-INF/myweb-servlet.xml
            报错原因：springmvc创建容器对象时，读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml
            自定义读取位置<init-param>
    -->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <init-param>
            <!--springmvc的配置文件的位置的属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value><!--classpath在resource目录下-->
        </init-param>

        <!--在tomcat启动后，创建servlet对象
        <load-on-startup>:表示tomcat启动后创建对象的顺序。值是个整数，数值越小tomcat创建对象的时间越早
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
        <!--使用框架的时候<url-pattern>有两种值可以使用
            1.扩展名 *.xxx xxx是自定义扩展名 常用*.do *.action *.mvc
                请求地址是.do结尾的都交给myweb处理
            2.使用“/”
        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
    <!--<servlet>
        <servlet-name>springmvc2</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        在tomcat启动后，创建servlet对象
        <load-on-startup>:表示tomcat启动后创建对象的顺序。值是个整数，数值越小tomcat创建对象的时间越早

        tomcat在启动之后先创建1对象，再创建2对象

        <load-on-startup>2</load-on-startup>
    </servlet>-->
    
</web-app>